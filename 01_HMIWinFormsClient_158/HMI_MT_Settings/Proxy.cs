//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.4971
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSRouter
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSTagValue", Namespace="http://schemas.datacontract.org/2004/07/DSRouter")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WcfDataServer_Lib.LstError))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue>))]
    public partial class DSTagValue : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint VarQualityField;
        
        private object VarValueAsObjectField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint VarQuality
        {
            get
            {
                return this.VarQualityField;
            }
            set
            {
                this.VarQualityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object VarValueAsObject
        {
            get
            {
                return this.VarValueAsObjectField;
            }
            set
            {
                this.VarValueAsObjectField = value;
            }
        }
    }
}
namespace WcfDataServer_Lib
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LstError", Namespace="http://schemas.datacontract.org/2004/07/WcfDataServer_Lib")]
    public partial class LstError : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] lstErrorField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] lstError
        {
            get
            {
                return this.lstErrorField;
            }
            set
            {
                this.lstErrorField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IDSRouter", CallbackContract=typeof(IDSRouterCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IDSRouter
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/RegisterForErrorEvent")]
    void RegisterForErrorEvent(string keyticker);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/RegisterForErrorEvent")]
    System.IAsyncResult BeginRegisterForErrorEvent(string keyticker, System.AsyncCallback callback, object asyncState);
    
    void EndRegisterForErrorEvent(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/Ping")]
    void Ping();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/Ping")]
    System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
    
    void EndPing(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IDSRouter/GetDSValueAsByteBufferResponse")]
    byte[] GetDSValueAsByteBuffer(ushort DSGuid, byte[] arr);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IDSRouter/GetDSValueAsByteBufferResponse")]
    System.IAsyncResult BeginGetDSValueAsByteBuffer(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState);
    
    byte[] EndGetDSValueAsByteBuffer(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IDSRouter/GetDSOscByIdInBDResponse")]
    byte[] GetDSOscByIdInBD(ushort DSGuid, byte[] arr);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IDSRouter/GetDSOscByIdInBDResponse")]
    System.IAsyncResult BeginGetDSOscByIdInBD(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState);
    
    byte[] EndGetDSOscByIdInBD(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SetReq2ArhivInfo")]
    void SetReq2ArhivInfo(ushort DSGuid, byte[] arr);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/SetReq2ArhivInfo")]
    System.IAsyncResult BeginSetReq2ArhivInfo(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState);
    
    void EndSetReq2ArhivInfo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/RunCMDMOA", ReplyAction="http://tempuri.org/IDSRouter/RunCMDMOAResponse")]
    byte[] RunCMDMOA(ushort DSGuid, byte[] pq);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/RunCMDMOA", ReplyAction="http://tempuri.org/IDSRouter/RunCMDMOAResponse")]
    System.IAsyncResult BeginRunCMDMOA(ushort DSGuid, byte[] pq, System.AsyncCallback callback, object asyncState);
    
    byte[] EndRunCMDMOA(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSConfigFile", ReplyAction="http://tempuri.org/IDSRouter/GetDSConfigFileResponse")]
    System.IO.Stream GetDSConfigFile(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSConfigFile", ReplyAction="http://tempuri.org/IDSRouter/GetDSConfigFileResponse")]
    System.IAsyncResult BeginGetDSConfigFile(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    System.IO.Stream EndGetDSConfigFile(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetDSGUIDsResponse")]
    string GetDSGUIDs();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetDSGUIDsResponse")]
    System.IAsyncResult BeginGetDSGUIDs(System.AsyncCallback callback, object asyncState);
    
    string EndGetDSGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSINFO", ReplyAction="http://tempuri.org/IDSRouter/GetDSINFOResponse")]
    string GetDSINFO(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSINFO", ReplyAction="http://tempuri.org/IDSRouter/GetDSINFOResponse")]
    System.IAsyncResult BeginGetDSINFO(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetDSINFO(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSourceGUIDsResponse")]
    string GetSourceGUIDs(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetSourceGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSourceGUIDsResponse")]
    System.IAsyncResult BeginGetSourceGUIDs(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetSourceGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceName", ReplyAction="http://tempuri.org/IDSRouter/GetSourceNameResponse")]
    string GetSourceName(ushort DSGuid, ushort SrcGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetSourceName", ReplyAction="http://tempuri.org/IDSRouter/GetSourceNameResponse")]
    System.IAsyncResult BeginGetSourceName(ushort DSGuid, ushort SrcGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetSourceName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetECUGUIDsResponse")]
    string GetECUGUIDs(ushort DSGuid, ushort SrcGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetECUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetECUGUIDsResponse")]
    System.IAsyncResult BeginGetECUGUIDs(ushort DSGuid, ushort SrcGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetECUGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUName", ReplyAction="http://tempuri.org/IDSRouter/GetECUNameResponse")]
    string GetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetECUName", ReplyAction="http://tempuri.org/IDSRouter/GetECUNameResponse")]
    System.IAsyncResult BeginGetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetECUName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDsResponse")]
    string GetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDsResponse")]
    System.IAsyncResult BeginGetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetSrcEcuRTUGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGUIDsResponse")]
    string GetRTUGUIDs(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGUIDsResponse")]
    System.IAsyncResult BeginGetRTUGUIDs(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetRTUGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsRTUEnable", ReplyAction="http://tempuri.org/IDSRouter/IsRTUEnableResponse")]
    bool IsRTUEnable(ushort DSGuid, uint RtuGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/IsRTUEnable", ReplyAction="http://tempuri.org/IDSRouter/IsRTUEnableResponse")]
    System.IAsyncResult BeginIsRTUEnable(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState);
    
    bool EndIsRTUEnable(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUDescription", ReplyAction="http://tempuri.org/IDSRouter/GetRTUDescriptionResponse")]
    string GetRTUDescription(ushort DSGuid, uint RtuGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetRTUDescription", ReplyAction="http://tempuri.org/IDSRouter/GetRTUDescriptionResponse")]
    System.IAsyncResult BeginGetRTUDescription(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetRTUDescription(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetGroupGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetGroupGUIDsResponse")]
    string GetGroupGUIDs(ushort DSGuid, uint RtuGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetGroupGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetGroupGUIDsResponse")]
    System.IAsyncResult BeginGetGroupGUIDs(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetGroupGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsGroupEnable", ReplyAction="http://tempuri.org/IDSRouter/IsGroupEnableResponse")]
    bool IsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/IsGroupEnable", ReplyAction="http://tempuri.org/IDSRouter/IsGroupEnableResponse")]
    System.IAsyncResult BeginIsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
    
    bool EndIsGroupEnable(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGroupName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGroupNameResponse")]
    string GetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetRTUGroupName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGroupNameResponse")]
    System.IAsyncResult BeginGetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetRTUGroupName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroupResponse")]
    string GetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroupResponse")]
    System.IAsyncResult BeginGetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetSubGroupGUIDsInGroup(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDsResponse")]
    string GetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDsResponse")]
    System.IAsyncResult BeginGetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetRtuGroupTagGUIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUTagName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUTagNameResponse")]
    string GetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetRTUTagName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUTagNameResponse")]
    System.IAsyncResult BeginGetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID, System.AsyncCallback callback, object asyncState);
    
    string EndGetRTUTagName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsValue", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValueResponse")]
    System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> GetTagsValue(string[] request);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetTagsValue", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValueResponse")]
    System.IAsyncResult BeginGetTagsValue(string[] request, System.AsyncCallback callback, object asyncState);
    
    System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> EndGetTagsValue(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SubscribeRTUTags")]
    void SubscribeRTUTags(string[] request);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/SubscribeRTUTags")]
    System.IAsyncResult BeginSubscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState);
    
    void EndSubscribeRTUTags(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/UnscribeRTUTags")]
    void UnscribeRTUTags(string[] request);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/UnscribeRTUTags")]
    System.IAsyncResult BeginUnscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState);
    
    void EndUnscribeRTUTags(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorsGUIDResponse")]
    WcfDataServer_Lib.LstError GetDSLastErrorsGUID(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorsGUIDResponse")]
    System.IAsyncResult BeginGetDSLastErrorsGUID(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    WcfDataServer_Lib.LstError EndGetDSLastErrorsGUID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorGUIDResponse")]
    string GetDSLastErrorGUID(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorGUIDResponse")]
    System.IAsyncResult BeginGetDSLastErrorGUID(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    string EndGetDSLastErrorGUID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUIDResponse")]
    string GetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUIDResponse")]
    System.IAsyncResult BeginGetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID, System.AsyncCallback callback, object asyncState);
    
    string EndGetDSErrorTextByErrorGUID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/AcknowledgementOfErrors")]
    void AcknowledgementOfErrors(ushort DSGuid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/AcknowledgementOfErrors")]
    System.IAsyncResult BeginAcknowledgementOfErrors(ushort DSGuid, System.AsyncCallback callback, object asyncState);
    
    void EndAcknowledgementOfErrors(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IDSRouterCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NewErrorEvent")]
    void NewErrorEvent(string codeDataTimeEvent);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/NewErrorEvent")]
    System.IAsyncResult BeginNewErrorEvent(string codeDataTimeEvent, System.AsyncCallback callback, object asyncState);
    
    void EndNewErrorEvent(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/Pong")]
    void Pong();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/Pong")]
    System.IAsyncResult BeginPong(System.AsyncCallback callback, object asyncState);
    
    void EndPong(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NotifyChangedTags")]
    void NotifyChangedTags(System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> lstChangedTags);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/NotifyChangedTags")]
    System.IAsyncResult BeginNotifyChangedTags(System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> lstChangedTags, System.AsyncCallback callback, object asyncState);
    
    void EndNotifyChangedTags(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NotifyCMDExecuted")]
    void NotifyCMDExecuted(byte[] cmdarray);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDSRouter/NotifyCMDExecuted")]
    System.IAsyncResult BeginNotifyCMDExecuted(byte[] cmdarray, System.AsyncCallback callback, object asyncState);
    
    void EndNotifyCMDExecuted(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IDSRouterChannel : IDSRouter, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class DSRouterClient : System.ServiceModel.DuplexClientBase<IDSRouter>, IDSRouter
{
    
    public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void RegisterForErrorEvent(string keyticker)
    {
        base.Channel.RegisterForErrorEvent(keyticker);
    }
    
    public System.IAsyncResult BeginRegisterForErrorEvent(string keyticker, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRegisterForErrorEvent(keyticker, callback, asyncState);
    }
    
    public void EndRegisterForErrorEvent(System.IAsyncResult result)
    {
        base.Channel.EndRegisterForErrorEvent(result);
    }
    
    public void Ping()
    {
        base.Channel.Ping();
    }
    
    public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPing(callback, asyncState);
    }
    
    public void EndPing(System.IAsyncResult result)
    {
        base.Channel.EndPing(result);
    }
    
    public byte[] GetDSValueAsByteBuffer(ushort DSGuid, byte[] arr)
    {
        return base.Channel.GetDSValueAsByteBuffer(DSGuid, arr);
    }
    
    public System.IAsyncResult BeginGetDSValueAsByteBuffer(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSValueAsByteBuffer(DSGuid, arr, callback, asyncState);
    }
    
    public byte[] EndGetDSValueAsByteBuffer(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSValueAsByteBuffer(result);
    }
    
    public byte[] GetDSOscByIdInBD(ushort DSGuid, byte[] arr)
    {
        return base.Channel.GetDSOscByIdInBD(DSGuid, arr);
    }
    
    public System.IAsyncResult BeginGetDSOscByIdInBD(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSOscByIdInBD(DSGuid, arr, callback, asyncState);
    }
    
    public byte[] EndGetDSOscByIdInBD(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSOscByIdInBD(result);
    }
    
    public void SetReq2ArhivInfo(ushort DSGuid, byte[] arr)
    {
        base.Channel.SetReq2ArhivInfo(DSGuid, arr);
    }
    
    public System.IAsyncResult BeginSetReq2ArhivInfo(ushort DSGuid, byte[] arr, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSetReq2ArhivInfo(DSGuid, arr, callback, asyncState);
    }
    
    public void EndSetReq2ArhivInfo(System.IAsyncResult result)
    {
        base.Channel.EndSetReq2ArhivInfo(result);
    }
    
    public byte[] RunCMDMOA(ushort DSGuid, byte[] pq)
    {
        return base.Channel.RunCMDMOA(DSGuid, pq);
    }
    
    public System.IAsyncResult BeginRunCMDMOA(ushort DSGuid, byte[] pq, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRunCMDMOA(DSGuid, pq, callback, asyncState);
    }
    
    public byte[] EndRunCMDMOA(System.IAsyncResult result)
    {
        return base.Channel.EndRunCMDMOA(result);
    }
    
    public System.IO.Stream GetDSConfigFile(ushort DSGuid)
    {
        return base.Channel.GetDSConfigFile(DSGuid);
    }
    
    public System.IAsyncResult BeginGetDSConfigFile(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSConfigFile(DSGuid, callback, asyncState);
    }
    
    public System.IO.Stream EndGetDSConfigFile(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSConfigFile(result);
    }
    
    public string GetDSGUIDs()
    {
        return base.Channel.GetDSGUIDs();
    }
    
    public System.IAsyncResult BeginGetDSGUIDs(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSGUIDs(callback, asyncState);
    }
    
    public string EndGetDSGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSGUIDs(result);
    }
    
    public string GetDSINFO(ushort DSGuid)
    {
        return base.Channel.GetDSINFO(DSGuid);
    }
    
    public System.IAsyncResult BeginGetDSINFO(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSINFO(DSGuid, callback, asyncState);
    }
    
    public string EndGetDSINFO(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSINFO(result);
    }
    
    public string GetSourceGUIDs(ushort DSGuid)
    {
        return base.Channel.GetSourceGUIDs(DSGuid);
    }
    
    public System.IAsyncResult BeginGetSourceGUIDs(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSourceGUIDs(DSGuid, callback, asyncState);
    }
    
    public string EndGetSourceGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetSourceGUIDs(result);
    }
    
    public string GetSourceName(ushort DSGuid, ushort SrcGuid)
    {
        return base.Channel.GetSourceName(DSGuid, SrcGuid);
    }
    
    public System.IAsyncResult BeginGetSourceName(ushort DSGuid, ushort SrcGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSourceName(DSGuid, SrcGuid, callback, asyncState);
    }
    
    public string EndGetSourceName(System.IAsyncResult result)
    {
        return base.Channel.EndGetSourceName(result);
    }
    
    public string GetECUGUIDs(ushort DSGuid, ushort SrcGuid)
    {
        return base.Channel.GetECUGUIDs(DSGuid, SrcGuid);
    }
    
    public System.IAsyncResult BeginGetECUGUIDs(ushort DSGuid, ushort SrcGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetECUGUIDs(DSGuid, SrcGuid, callback, asyncState);
    }
    
    public string EndGetECUGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetECUGUIDs(result);
    }
    
    public string GetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid)
    {
        return base.Channel.GetECUName(DSGuid, SrcGuid, EcuGuid);
    }
    
    public System.IAsyncResult BeginGetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetECUName(DSGuid, SrcGuid, EcuGuid, callback, asyncState);
    }
    
    public string EndGetECUName(System.IAsyncResult result)
    {
        return base.Channel.EndGetECUName(result);
    }
    
    public string GetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid)
    {
        return base.Channel.GetSrcEcuRTUGUIDs(DSGuid, SrcGuid, EcuGuid);
    }
    
    public System.IAsyncResult BeginGetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSrcEcuRTUGUIDs(DSGuid, SrcGuid, EcuGuid, callback, asyncState);
    }
    
    public string EndGetSrcEcuRTUGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetSrcEcuRTUGUIDs(result);
    }
    
    public string GetRTUGUIDs(ushort DSGuid)
    {
        return base.Channel.GetRTUGUIDs(DSGuid);
    }
    
    public System.IAsyncResult BeginGetRTUGUIDs(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRTUGUIDs(DSGuid, callback, asyncState);
    }
    
    public string EndGetRTUGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetRTUGUIDs(result);
    }
    
    public bool IsRTUEnable(ushort DSGuid, uint RtuGuid)
    {
        return base.Channel.IsRTUEnable(DSGuid, RtuGuid);
    }
    
    public System.IAsyncResult BeginIsRTUEnable(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIsRTUEnable(DSGuid, RtuGuid, callback, asyncState);
    }
    
    public bool EndIsRTUEnable(System.IAsyncResult result)
    {
        return base.Channel.EndIsRTUEnable(result);
    }
    
    public string GetRTUDescription(ushort DSGuid, uint RtuGuid)
    {
        return base.Channel.GetRTUDescription(DSGuid, RtuGuid);
    }
    
    public System.IAsyncResult BeginGetRTUDescription(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRTUDescription(DSGuid, RtuGuid, callback, asyncState);
    }
    
    public string EndGetRTUDescription(System.IAsyncResult result)
    {
        return base.Channel.EndGetRTUDescription(result);
    }
    
    public string GetGroupGUIDs(ushort DSGuid, uint RtuGuid)
    {
        return base.Channel.GetGroupGUIDs(DSGuid, RtuGuid);
    }
    
    public System.IAsyncResult BeginGetGroupGUIDs(ushort DSGuid, uint RtuGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetGroupGUIDs(DSGuid, RtuGuid, callback, asyncState);
    }
    
    public string EndGetGroupGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetGroupGUIDs(result);
    }
    
    public bool IsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid)
    {
        return base.Channel.IsGroupEnable(DSGuid, RtuGuid, GroupGuid);
    }
    
    public System.IAsyncResult BeginIsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIsGroupEnable(DSGuid, RtuGuid, GroupGuid, callback, asyncState);
    }
    
    public bool EndIsGroupEnable(System.IAsyncResult result)
    {
        return base.Channel.EndIsGroupEnable(result);
    }
    
    public string GetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid)
    {
        return base.Channel.GetRTUGroupName(DSGuid, RtuGuid, GroupGuid);
    }
    
    public System.IAsyncResult BeginGetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRTUGroupName(DSGuid, RtuGuid, GroupGuid, callback, asyncState);
    }
    
    public string EndGetRTUGroupName(System.IAsyncResult result)
    {
        return base.Channel.EndGetRTUGroupName(result);
    }
    
    public string GetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid)
    {
        return base.Channel.GetSubGroupGUIDsInGroup(DSGuid, RtuGuid, GroupGuid);
    }
    
    public System.IAsyncResult BeginGetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSubGroupGUIDsInGroup(DSGuid, RtuGuid, GroupGuid, callback, asyncState);
    }
    
    public string EndGetSubGroupGUIDsInGroup(System.IAsyncResult result)
    {
        return base.Channel.EndGetSubGroupGUIDsInGroup(result);
    }
    
    public string GetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid)
    {
        return base.Channel.GetRtuGroupTagGUIDs(DSGuid, RtuGuid, GroupGuid);
    }
    
    public System.IAsyncResult BeginGetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRtuGroupTagGUIDs(DSGuid, RtuGuid, GroupGuid, callback, asyncState);
    }
    
    public string EndGetRtuGroupTagGUIDs(System.IAsyncResult result)
    {
        return base.Channel.EndGetRtuGroupTagGUIDs(result);
    }
    
    public string GetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID)
    {
        return base.Channel.GetRTUTagName(DSGuid, RtuGuid, GroupGuid, TagGUID);
    }
    
    public System.IAsyncResult BeginGetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRTUTagName(DSGuid, RtuGuid, GroupGuid, TagGUID, callback, asyncState);
    }
    
    public string EndGetRTUTagName(System.IAsyncResult result)
    {
        return base.Channel.EndGetRTUTagName(result);
    }
    
    public System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> GetTagsValue(string[] request)
    {
        return base.Channel.GetTagsValue(request);
    }
    
    public System.IAsyncResult BeginGetTagsValue(string[] request, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetTagsValue(request, callback, asyncState);
    }
    
    public System.Collections.Generic.Dictionary<string, DSRouter.DSTagValue> EndGetTagsValue(System.IAsyncResult result)
    {
        return base.Channel.EndGetTagsValue(result);
    }
    
    public void SubscribeRTUTags(string[] request)
    {
        base.Channel.SubscribeRTUTags(request);
    }
    
    public System.IAsyncResult BeginSubscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginSubscribeRTUTags(request, callback, asyncState);
    }
    
    public void EndSubscribeRTUTags(System.IAsyncResult result)
    {
        base.Channel.EndSubscribeRTUTags(result);
    }
    
    public void UnscribeRTUTags(string[] request)
    {
        base.Channel.UnscribeRTUTags(request);
    }
    
    public System.IAsyncResult BeginUnscribeRTUTags(string[] request, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUnscribeRTUTags(request, callback, asyncState);
    }
    
    public void EndUnscribeRTUTags(System.IAsyncResult result)
    {
        base.Channel.EndUnscribeRTUTags(result);
    }
    
    public WcfDataServer_Lib.LstError GetDSLastErrorsGUID(ushort DSGuid)
    {
        return base.Channel.GetDSLastErrorsGUID(DSGuid);
    }
    
    public System.IAsyncResult BeginGetDSLastErrorsGUID(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSLastErrorsGUID(DSGuid, callback, asyncState);
    }
    
    public WcfDataServer_Lib.LstError EndGetDSLastErrorsGUID(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSLastErrorsGUID(result);
    }
    
    public string GetDSLastErrorGUID(ushort DSGuid)
    {
        return base.Channel.GetDSLastErrorGUID(DSGuid);
    }
    
    public System.IAsyncResult BeginGetDSLastErrorGUID(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSLastErrorGUID(DSGuid, callback, asyncState);
    }
    
    public string EndGetDSLastErrorGUID(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSLastErrorGUID(result);
    }
    
    public string GetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID)
    {
        return base.Channel.GetDSErrorTextByErrorGUID(DSGuid, errorGUID);
    }
    
    public System.IAsyncResult BeginGetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetDSErrorTextByErrorGUID(DSGuid, errorGUID, callback, asyncState);
    }
    
    public string EndGetDSErrorTextByErrorGUID(System.IAsyncResult result)
    {
        return base.Channel.EndGetDSErrorTextByErrorGUID(result);
    }
    
    public void AcknowledgementOfErrors(ushort DSGuid)
    {
        base.Channel.AcknowledgementOfErrors(DSGuid);
    }
    
    public System.IAsyncResult BeginAcknowledgementOfErrors(ushort DSGuid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAcknowledgementOfErrors(DSGuid, callback, asyncState);
    }
    
    public void EndAcknowledgementOfErrors(System.IAsyncResult result)
    {
        base.Channel.EndAcknowledgementOfErrors(result);
    }
}
